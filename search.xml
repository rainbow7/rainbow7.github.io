<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>始</title>
    <url>/2021/02/10/%E5%A7%8B/</url>
    <content><![CDATA[<p>当你觉得为时已晚时，恰恰是最早的时候。</p>
<a id="more"></a>
<p>You have to make the back of the fence that people won’t see look just as beautiful as the front.</p>
<p>那些好的习惯，终将救你一命；那些坏的习惯，终将要了你的命。</p>
<p>天地不仁，以万物为刍狗。</p>
<p>凡所有相，皆是虚妄。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用移动硬盘下载Android源码</title>
    <url>/2021/02/16/Mac%E4%BD%BF%E7%94%A8%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E4%B8%8B%E8%BD%BDAndroid%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>别管看不看，额，主要看有没有时间：），先把Android源码搞下来。废话不多说，开搞。</p>
<a id="more"></a>
<h3 id="创建磁盘分区"><a class="header-anchor" href="#创建磁盘分区">¶</a>创建磁盘分区</h3>
<p>无奈Mac的磁盘已经成天的提示不够用，只好使用移动硬盘来下载。我是专门弄了一块硬盘存放Android源码，这样的话比较省心。上来直接格式化为大小写敏感的分区，也就是<strong>Mac OS扩展 区分大小写，日志式</strong>，为什么要区分大小写， 是因如果要编译Android源码的话，是需要所在分区对大小写敏感。</p>
<h3 id="安装repo"><a class="header-anchor" href="#安装repo">¶</a>安装<a class="link"   href="https://source.android.com/source/developing" >repo<i class="fas fa-external-link-alt"></i></a></h3>
<ul>
<li><code>mkdir ~/bin</code>  // 当前用户下创建bin目录</li>
<li><code>PAHT=~/bin:$PATH</code>  // 加入到临时变量</li>
<li><code>curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</code>  // 下载repo到bin目录</li>
<li><code>chmod a+x ~/bin/repo</code>  // 修改repo的权限。意思是给所有用户添加执行权限</li>
<li><code>cd /Volumes/硬盘的名字</code>  // 进入到要下载源码的目录</li>
<li><code>mkdir aosp</code>  //创建工作空间，名字看自己喜好</li>
<li><code>cd aosp</code>  // 进入到工作空间</li>
</ul>
<h3 id="配置git"><a class="header-anchor" href="#配置git">¶</a>配置git</h3>
<p>建议使用gmail邮箱。这个据说是为了以后更新源码方便，因为目前还没更新过，所以也不是很清楚到底有没有用。</p>
<ul>
<li><code>git config --global user.name xxx</code></li>
<li><code>git config --global user.email xxx@xxx.xx</code></li>
</ul>
<h3 id="配置清华源（可选）"><a class="header-anchor" href="#配置清华源（可选）">¶</a>配置清华源（可选）</h3>
<p>不方便科学上网，或者为了提高速度，可以配置清华源。</p>
<ul>
<li>加一个环境变量，使用bash就在.bashrc，使用zsh就在.zshrc文件里加入<code>'export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/'</code></li>
</ul>
<h3 id="初始化repo，同步代码"><a class="header-anchor" href="#初始化repo，同步代码">¶</a>初始化repo，同步代码</h3>
<ul>
<li><code>cd /Volumes/aosp</code> 进入到第2步建立好的目录</li>
<li><a class="link"   href="https://android.googlesource.com/platform/manifest" >Android版本<i class="fas fa-external-link-alt"></i></a>，可以去这里看所有的分支。</li>
<li><code>repo init '$ repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-11.0.0_r9' </code>这里选择当前最新版本分支</li>
<li>初始化完成后，<code>repo sync</code> 等吧。</li>
<li>下载完成后，大概占用了50多G空间，解压完成后大概占用110多G的空间。只能说，真TM大啊。</li>
</ul>
<blockquote>
<p>其实大部分的教程也是基于<a class="link"   href="https://source.android.com/source/downloading" >官方教程<i class="fas fa-external-link-alt"></i></a>进行的拓展，加了很多图文，我觉得对于一个开发者来说，其实有些太过于详细了。</p>
</blockquote>
<blockquote>
<p>特别鸣谢<br>
<a class="link"   href="https://blog.csdn.net/u012528526/article/details/87994711" >https://blog.csdn.net/u012528526/article/details/87994711<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://juejin.cn/post/6844903832028184590" >https://juejin.cn/post/6844903832028184590<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>儿子语录</title>
    <url>/2021/02/19/%E5%84%BF%E5%AD%90%E8%AF%AD%E5%BD%95/</url>
    <content><![CDATA[<p>“你有什么忙吗？我来帮你。”</p>
<a id="more"></a>
<p>“棒”</p>
<p>“「爸爸」我有个主意”</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用Hexo+Github搭建个人博客</title>
    <url>/2021/02/12/Mac%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>我是怎么来的？还是简单记录下我的出生吧。我的爸爸是<a class="link"   href="https://hexo.io/zh-cn/" >Hexo<i class="fas fa-external-link-alt"></i></a>，它的自我介绍非常清晰，我就不废话啦。我的妈妈是<a class="link"   href="https://pages.github.com/" >Github Pages<i class="fas fa-external-link-alt"></i></a>，点击即可了解，看过之后发现，其实就算只有妈妈，也是可以有我的。不过有了爸爸，会让我更好的成长。感谢你们！</p>
<a id="more"></a>
<p>从上面也了解到，其实我是由“两部分组成的”。下面就分别介绍这两个部分。不会很详细的介绍，只会包括流程。因为在它们各自的官网首页已经有很详细的讲解了。本文大多也是摘抄自官网。</p>
<p>Hexo静态博客工具的安装</p>
<p>安装<a class="link"   href="https://nodejs.org/zh-cn/" >Node.js<i class="fas fa-external-link-alt"></i></a>，使用以下命令检查是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v &#x2F;&#x2F; 正常情况下，会有版本号输出</span><br><span class="line">npm -v &#x2F;&#x2F; npm是nodejs的包管理器，安装Hexo需要使用</span><br></pre></td></tr></table></figure>
<p>安装<a class="link"   href="https://hexo.io/zh-cn/" >Hexo<i class="fas fa-external-link-alt"></i></a>，完成第一步后，安装Hexo就很简单了， 终端中输入<code>npm install hexo-cli -g</code>。完成后输入以下命令生成本地页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog  &#x2F;&#x2F; 初始化博客文件夹blog，可改为其他</span><br><span class="line">cd blog  &#x2F;&#x2F; 进入到 blog 文件夹</span><br><span class="line">npm install  &#x2F;&#x2F; 安装</span><br><span class="line">hexo new 文件名 &#x2F;&#x2F; 创建新的文章，文章会以markdown格式保存在blog&#x2F;source&#x2F;_post中</span><br><span class="line">hexo server  &#x2F;&#x2F; 启动本地服务，这步执行完成之后，就可以在本地预览页面了，链接会在终端中输出，按住ctrl就可以点击查看了</span><br></pre></td></tr></table></figure>
<p>经过以上两个步骤就完成了Hexo的安装，已经可以在本地浏览生成的页面了。下面将介绍如何配置Github Pages，以便将我们的页面上传到Github。</p>
<p>Github Pages的配置。Github当然是依赖Git的了，所以要先安装好Git工具。</p>
<p>安装<a class="link"   href="https://git-scm.com/" >Git<i class="fas fa-external-link-alt"></i></a>，安装完成后终端输入<code>git version</code>，有版本号输出表示安装成功。<br>
配置Github Pages，首先需要开通Github,然后是设置SSH key，如果没有的话。</p>
<p>补充，这里简单说下配置多个SSH key。比如公司的Git Lab仓库与我们的自己的Github分别使用不同的配置。</p>
<p>1.生成新的密钥  <code>ssh-keygen -t rsa -C email // 将email替换为你要使用的email，回车后输入保存的文件名，如id_rsa_github</code></p>
<p>2.进入.shh文件夹，创建config文件  <code>vi config // 生成同时编辑config文件</code></p>
<p>3.为不同的域配置不同的SSH key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host xxx.com &#x2F;&#x2F; 域名</span><br><span class="line">User email &#x2F;&#x2F; 所配置的邮件地址</span><br><span class="line">PreferredAuthentications publickey &#x2F;&#x2F; 密钥类型，固定公钥</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_xxx &#x2F;&#x2F; key 文件</span><br><span class="line">#-----------------------------------------------------</span><br><span class="line">Host xxx.com</span><br><span class="line">User email</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_xxx</span><br></pre></td></tr></table></figure>
<p>在Github上新建仓库，需要注意的是Repository name，<font color=#ff0000><a class="link"   href="http://xn--username-wg0mv26l2m8i.github.io" >必须为username.github.io<i class="fas fa-external-link-alt"></i></a>。username为你的Github的用户名。</font>创建完成以后。点击此Repository的Setting，向下滚动，找到Github Pages，目前Github仓库主分支名称已经改了main，我是习惯性的在创建时将分支名改为了master。此时如果在项目下新建一个名为index.html的文件，就可以通过https://username.github.io/ 来访问了。</p>
<p>我们已经分别准备好了Hexo与Github Pages。是时候将它们关联起来了。</p>
<p>进入到已经使用Hexo初始化好的博客文件夹（假定叫blog），打开_config.yml文件，向下滚动，找到deploy，加入如下配置，<font color=#ff0000>要注意空格必须要有</font></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;git@github.com:username/username.github.io.git&#x27;</span> <span class="string">//</span> <span class="string">也就是平时clone仓库时的地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&#x27;master&#x27;</span> <span class="string">//</span> <span class="string">博客所在的分支，据说目前只支持主分支，这个没有做验证</span></span><br></pre></td></tr></table></figure>
<p>安装Hexo插件，终端执行<code>npm install hexo-deployer-git -save</code>完成后就可以使用Hexo进行部署了。以下是几个常用的命令，更多的命令可以通过hexo help查看。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean  &#x2F;&#x2F; 清除，如果新的改动没有变化，可以试下，通常不需要</span><br><span class="line">hexo g(generate)  &#x2F;&#x2F; 生成页面</span><br><span class="line">hexo s(server)  &#x2F;&#x2F; 开启本地服务，可以先在本地预览</span><br><span class="line">hexo d(deploy)  &#x2F;&#x2F; 发布，成功的话，过一会儿，通常10几秒，打开https:&#x2F;&#x2F;username.github.io&#x2F;就能看到自己写的文章了</span><br><span class="line">hexo g -d  &#x2F;&#x2F; 组合命令，生成+发布</span><br></pre></td></tr></table></figure>
<p>现在已经可以开始写一些东西，并且方便的发布了。如果你想自定义主题，自定义域名，可以接着往下看。</p>
<p><a class="link"   href="https://hexo.io/themes/" >主题<i class="fas fa-external-link-alt"></i></a>，找到自己的喜欢的主题，clone到blog文件夹下的themes文件夹，并修改_config.yml中的theme配置。是不是很简单。</p>
<p>域名，以阿里云为例，点击添加记录，按以下配置添加，把记录值改为你的地址。然后在Repository添加一个文件CNAME，文件的内容是你的域名。最后在Repository的Setting中，Github Pages那里添加你的域名，点击保存。现在已经可以使用你自己的域名来访问站点了。各配置如下图所示<br>
<img src="/assets/blogImage/ali_domain_setting.png" alt=""></p>
<p>记录使用hexo过程中遇到的一些问题，为了保持整个目录的整洁，就不新建文章了。</p>
<p>1.使用自定义域名，每次deploy后，域名失效。</p>
<p>解决方法：当我们使用自定义域名后，其实是生成了一个文件CNAME，里面记录着我们的域名，当deploy后，会使用blog/source下的文件替换github仓库中的文件（暂且这么认为，真实的情况还没有验证），总之就是把CNAME文件给搞没了。找到问题之后，对症下药就好了，在source文件夹下新建一个CNAME文件，把我们域名写上就好了。这样每次deploy后，这个文件还会有，域名就可以正常使用了。</p>
]]></content>
  </entry>
  <entry>
    <title>使用CI部署博客</title>
    <url>/2021/02/23/%E4%BD%BF%E7%94%A8CI%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>工欲善其事，必先利其器。</p>
<a id="more"></a>
<p>使用持续集成系统部署博客，会省去不少工作，也方便在没有hexo的环境下对博客内容进行修改。</p>
<p><a class="link"   href="https://keep.xpoet.cn/2020/11/%E4%BD%BF%E7%94%A8-Travis-CI-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-Hexo-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/" >Xpote<i class="fas fa-external-link-alt"></i></a>老哥（应该不会是小姐姐吧）已经写了非常详细的教程了。这里就不再重复了。本博客的主题也是使用他（她）的。非常简洁、美观、实用。真的非常感谢！</p>
<p>最后提一点要注意**.travis.yml**配置文件中<code>token</code>变量的值是，在Tarvis上面配置的<code>Environment Variables</code>的name。可能是我比较傻，当时用token值把这个替换了。结果部署的时候提示没权限…</p>
<p><img src="/assets/blogImage/travis_config.png" alt=""></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">xxx</span>         				<span class="comment"># 工作分支（博客源码的分支）</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span>            <span class="comment"># 跳过清理</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">$GH_TOKEN</span>              <span class="comment"># GitHub Token 变量</span></span><br><span class="line">  <span class="attr">keep_history:</span> <span class="literal">true</span>            <span class="comment"># 保持推送记录，以增量提交的方式</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">public</span>             <span class="comment"># 需要推送到 gh-pages 分支的静态文件目录</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">xxx</span>            <span class="comment"># 构建好的博客分支，也就是对外提供静态页面的分支</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
